name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-2
  # Make sure these secrets are configured in your GitHub repository settings
  ECR_GO_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/go-backend
  ECR_JAVA_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/java-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- GO LANGUAGE SPECIFIC SETUP ---
      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Ensure this matches the Go version declared in your backend-go/go.mod

      - name: Tidy Go modules
        # This step now simply runs 'go mod tidy'
        # It relies on backend-go/go.mod having correctly pinned versions.
        # The 'go get -u' and 'go clean -modcache' workarounds are removed.
        run: |
          cd backend-go
          go mod tidy # This will update go.sum if needed and verify go.mod
          cd ..
      # --- END GO LANGUAGE SPECIFIC SETUP ---

      # Build and push Go backend
      - name: Build Go Docker image
        run: docker build -t go-backend ./backend-go

      - name: Tag Go Docker image
        run: docker tag go-backend:latest $ECR_GO_REPO:latest

      - name: Push Go Docker image
        run: docker push $ECR_GO_REPO:latest

      # Build and push Java backend
      - name: Build Java Docker image
        run: docker build -t java-backend ./backend-java

      - name: Tag Java Docker image
        run: docker tag java-backend:latest $ECR_JAVA_REPO:latest

      - name: Push Java Docker image
        run: docker push $ECR_JAVA_REPO:latest

  # Optionally add jobs for Terraform and EKS deployment here

  # Example: Terraform Plan/Apply Job
  # This job will run after 'build-and-push' successfully completes.
  terraform:
    needs: build-and-push # Ensures Docker images are built and pushed first
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checks out the repository code
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 # Sets up the Terraform CLI
      - name: Terraform Init
        # Assuming your Terraform configuration is in a directory named 'infra'
        run: terraform -chdir=infra init
      - name: Terraform Plan
        # Executes a Terraform plan to show what changes would be made
        run: terraform -chdir=infra plan
      # Uncomment the following step to enable automatic apply in CI/CD (use with caution!)
      # - name: Terraform Apply
      #   run: terraform -chdir=infra apply -auto-approve

  # Example: Deploy to EKS Job
  # This job will run after 'build-and-push' successfully completes.
  deploy:
    needs: build-and-push # Ensures Docker images are built and pushed first
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest' # Installs the latest version of kubectl
      - name: Update Kubeconfig
        # This command updates your kubectl configuration to connect to your EKS cluster.
        # Replace <your-eks-cluster-name> with the actual name of your EKS cluster.
        run: aws eks update-kubeconfig --region $AWS_REGION --name <your-eks-cluster-name>
      - name: Deploy to EKS
        # These commands deploy your Go and Java backends to EKS.
        # Replace <namespace> with your Kubernetes namespace.
        # Ensure your deployment YAML files are correctly configured to use these images.
        run: |
          kubectl set image deployment/go-backend go-backend=$ECR_GO_REPO:latest -n <namespace>
          kubectl set image deployment/java-backend java-backend=$ECR_JAVA_REPO:latest -n <namespace>